{
  "compilerOptions": {
    /* ----- 1. 基本编译目标与模块系统 (Core Compilation & Module System) ----- */
    "target": "ES2022", // 目标代码为 ES2022。Node.js v20+ 已完全支持，无需过度降级。
    "module": "NodeNext", // 采用与 Node.js 当前 ESM/CJS 生态兼容的模块系统。
    "moduleResolution": "NodeNext", // 配合 module: "NodeNext"，使用 Node.js 最新的模块解析策略。
    "lib": ["ES2022"], // 只包含 ES2022 的库，避免引入 DOM 等浏览器环境的类型。

    /* ----- 2. 严格性与代码质量 (Strictness & Code Quality) ----- */
    "strict": true, // 启用所有严格类型检查选项，这是现代 TypeScript 项目的基石。
    "noUnusedLocals": true, // 报告未使用的局部变量。
    "noUnusedParameters": true, // 报告未使用的参数。
    "noImplicitReturns": true, // 确保函数所有路径都有返回值。
    "exactOptionalPropertyTypes": true, // 更精确地处理可选属性，区分 `| undefined`。

    /* ----- 3. JS/TS 互操作性与生态兼容 (Interoperability & Compatibility) ----- */
    "esModuleInterop": true, // 解决 CommonJS 和 ES Modules 之间的兼容性问题，必开。
    "allowSyntheticDefaultImports": true, // 允许 `import React from 'react'` 这样的写法，与 esModuleInterop 配合使用。
    "resolveJsonModule": true, // 允许直接 import .json 文件。
    "isolatedModules": true, // 确保每个文件都可以被安全地独立编译。

    /* ----- 4. 输出与文件结构 (Output & File Structure) ----- */
    "outDir": "./dist", // 编译输出目录。
    "rootDir": "./src", // 指定源码根目录。

    /* ----- 5. 开发与调试 (Development & Debugging) ----- */
    "sourceMap": true, // 生成 .map 文件，用于调试。
    "declaration": true, // 为你的代码生成 .d.ts 类型声明文件。
    "declarationMap": true, // 为 .d.ts 文件生成 source map。

    /* ----- 6. 性能与构建优化 (Performance & Build Optimization) ----- */
    "skipLibCheck": true, // 跳过对所有 .d.ts 文件的类型检查，大幅提升编译速度。
    "forceConsistentCasingInFileNames": true,// 强制文件名大小写一致，避免在不同操作系统下的问题。
    "baseUrl": ".",                                  /* Specify the base directory to resolve non-relative module names. */
    "paths": {
      "#/*": ["./src/*"]
    },  
  },
  "include": ["src/**/*"], // 只编译 src 目录下的文件。
  "exclude": ["node_modules", "dist"] // 排除 node_modules 和 dist 目录。
}